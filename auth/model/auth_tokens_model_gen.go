// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authTokensFieldNames          = builder.RawFieldNames(&AuthTokens{})
	authTokensRows                = strings.Join(authTokensFieldNames, ",")
	authTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(authTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(authTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuthTokensIdPrefix    = "cache:authTokens:id:"
	cacheAuthTokensTokenPrefix = "cache:authTokens:token:"
)

type (
	authTokensModel interface {
		Insert(ctx context.Context, data *AuthTokens) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AuthTokens, error)
		FindOneByToken(ctx context.Context, token string) (*AuthTokens, error)
		Update(ctx context.Context, data *AuthTokens) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAuthTokensModel struct {
		sqlc.CachedConn
		table string
	}

	AuthTokens struct {
		Id        int64     `db:"id"`         // 主键ID
		UserId    int64     `db:"user_id"`    // 用户ID
		Token     string    `db:"token"`      // 用户认证 Token
		CreatedAt time.Time `db:"created_at"` // 创建时间
		ExpiresAt time.Time `db:"expires_at"` // 过期时间
	}
)

func newAuthTokensModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthTokensModel {
	return &defaultAuthTokensModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`auth_tokens`",
	}
}

func (m *defaultAuthTokensModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	authTokensIdKey := fmt.Sprintf("%s%v", cacheAuthTokensIdPrefix, id)
	authTokensTokenKey := fmt.Sprintf("%s%v", cacheAuthTokensTokenPrefix, data.Token)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, authTokensIdKey, authTokensTokenKey)
	return err
}

func (m *defaultAuthTokensModel) FindOne(ctx context.Context, id int64) (*AuthTokens, error) {
	authTokensIdKey := fmt.Sprintf("%s%v", cacheAuthTokensIdPrefix, id)
	var resp AuthTokens
	err := m.QueryRowCtx(ctx, &resp, authTokensIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authTokensRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthTokensModel) FindOneByToken(ctx context.Context, token string) (*AuthTokens, error) {
	authTokensTokenKey := fmt.Sprintf("%s%v", cacheAuthTokensTokenPrefix, token)
	var resp AuthTokens
	err := m.QueryRowIndexCtx(ctx, &resp, authTokensTokenKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `token` = ? limit 1", authTokensRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, token); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthTokensModel) Insert(ctx context.Context, data *AuthTokens) (sql.Result, error) {
	authTokensIdKey := fmt.Sprintf("%s%v", cacheAuthTokensIdPrefix, data.Id)
	authTokensTokenKey := fmt.Sprintf("%s%v", cacheAuthTokensTokenPrefix, data.Token)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, authTokensRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Token, data.ExpiresAt)
	}, authTokensIdKey, authTokensTokenKey)
	return ret, err
}

func (m *defaultAuthTokensModel) Update(ctx context.Context, newData *AuthTokens) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	authTokensIdKey := fmt.Sprintf("%s%v", cacheAuthTokensIdPrefix, data.Id)
	authTokensTokenKey := fmt.Sprintf("%s%v", cacheAuthTokensTokenPrefix, data.Token)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, authTokensRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Token, newData.ExpiresAt, newData.Id)
	}, authTokensIdKey, authTokensTokenKey)
	return err
}

func (m *defaultAuthTokensModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuthTokensIdPrefix, primary)
}

func (m *defaultAuthTokensModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authTokensRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthTokensModel) tableName() string {
	return m.table
}
